from sultan.api
from sultan.api import Sultan
import sultan
exit()
import os
os.system("mkdir /root/images")
if(os.system("mkdir /root/images")==0):
    print("Image directory created")
else:
    print("Error image directory exists")
image_list = os.popen("docker images --format \"{{.Repository}}\"").read()
image_list
image_list = os.popen("docker images --format \"{{.Repository}}\"").read().split("\n")
image_list
if('root_web-server' not in image_list):
    print(True)
else:
    print(False)
'root_web-server' not in image_list
'root_web-server' in image_list
exit()
import os
os.system("mkdir /root/images")
a = os.system("mkdir /root/images")
print(type(a))
print(a)
import logging
logging.basicConfig(filename='proxy.log', filemode='w', format='%(name)s - %(levelname)s - %(message)s')
def log(msg, logl):
    logging.logl(msg)
log("hello", info)
log("hello", "info")
import os
a = os.system("docker images")
print(a)
a = os.popen("docker images").read()
print(a)
a = os.popen("docker images --format \"{{Repository}}\"").read()
a = os.popen("docker images --format \'{{Repository}}\'").read()
a = os.popen("docker images --format \'{{.Repository}}\'").read()
print(a)
'webserver' in a
type(a)
a.split("\n")
'webserver' in a
list_running_containers = os.popen("docker ps --format \"{{.Image}}\"").read().split("\n")
print(list_running_containers)
list_running_containers = os.popen("docker ps --format \"{{.Image}}\"").read().split("\n")[:-1]
print(list_running_containers)
exit()
list_running_containers = os.popen("docker ps --format \"{{.Names}}\"").read().split("\n")[:-1]
import os
list_running_containers = os.popen("docker ps --format \"{{.Names}}\"").read().split("\n")[:-1]
print(list_running_containers)
list_running_containers_status = os.popen("docker ps --format \"{{.Status}}\"").read().split("\n")[:-1]
list_running_containers_statis
list_running_containers_status
list_running_containers_status = os.popen("docker ps --format \"{{.Status}}\" -a").read().split("\n")[:-1]
list_running_containers_status
'Exited' in list_running_containers_status[1]
'Exited' in list_running_containers_status[0]
status_start = os.popen("docker start webserver-main").read()
print(status_start)
status_start = os.popen("docker start webserver-main-23").read()
print(status_start)
tg = 'webserver-main'
docker stop $(docker ps -aq)
docker
tg = 'webserver-main'
status_start = os.popen("docker start "+tg).read()
print(status_start)
ps = os.popen('docker ps').read()
ps
import os
target_container_name = 'webserver-main'
start_wbserver_status = os.popen("docker start "+target_container_name).read()
docker ps
start_wbserver_status
os.popen("docker start "+target_container_name).read().split("\n").[:-1]
os.popen("docker start "+target_container_name).read().split("\n")[:-1]
from datetime import datetime
now = datetime.now()
print(now)
print(type(now))
dt = (datetime.now()).strftime("%H%M%S")
print
print(dt)
dt = (datetime.now()).strftime("%H%M%S_%m%d%Y")
print(dt)
list_of_images = os.popen("docker images --format {{.Repository}}")
print(list_of_images)
ls = os.popen("docker images --format {{.Repository}}").read()
ls
ls = os.popen("docker ps -aq").read().split("\n").[:-1]
ls = os.popen("docker ps -aq").read().split("\n")[:-1]
ls
'webserver' in ls
lol = os.popen("docker run -dit --name webserver-main -p 8080:80 webserver").read().split("\n")[:-1]
lol
lol = lol[1]
lol = lol[0]
lol
lol[:12]
bnr = os.popen("docker build /root/webserver/.").read()
bnr
bnr = os.popen("docker build /root/webserver/.").read()
bnr.split("\n")[:-1]
bnr.split("\n")[:-1][-1]
bnr = os.popen("docker build -t webserver /root/webserver/.").read()
bnr.split("\n")[:-1][-1]
#get docker info
iminfo = os.popen("docker images --format {{.Repository}}_{{.ID}}).read().split("\n")[:-1]
iminfo = os.popen("docker images --format {{.Repository}}_{{.ID}}").read().split("\n")[:-1]
iminfo
iminfo = os.popen("docker images --format {{.ID}}").read().split("\n")[:-1]
iminfo
bnr.split("\n")[:-1][-1].split(" ").[-1]) in iminfo
bnr.split("\n")[:-1][-1].split(" ")[-1]) in iminfo
bnr.split("\n")[:-1][-1].split(" ")[-1] in iminfo
exit()
import os
os.popen("mkdir /root/images").read().split("\n")[:-1]
a = os.popen("mkdir /root/images").read().split("\n")[:-1]
a
a = os.popen("mkdir /root/images").read().split("\n")
a
os.system("mkdir /root/images")
a = os.system("mkdir /root/images")
a
type(a)
type(256)
exit()
import socket, sys
world_facing_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
world_facing_socket.port
world_facing_socket.port()
world_facing_socket.bind("", 9000)
world_facing_socket.bind(("", 9000))
world_facing_socket.port
world_facing_socket
world_facing_socket.laddr
world_facing_socket.laddr()
world_facing_socket.addr()
world_facing_socket.getaddrinfo()
str(world_facing_socket)
str(world_facing_socket).split("laddr")
str(world_facing_socket).split("0.0.0.0.")
world_facing_socket
str(world_facing_socket)
str(world_facing_socket).split(",")
'9000' in str(world_facing_socket).split(",")
str(world_facing_socket)
str(world_facing_socket).split(" ")
str(world_facing_socket).split(" ")[-1]
str(world_facing_socket).split(" ")[-1][:-2]
exit()
import os
ecoy_uid = random.random()
            # Take checkpoint of main_webserver
decoy_uid = random.random()
import randon
import random
decoy_uid = random.random()
checkpoint_cmd = "docker checkpoint create --checkpoint-dir=/root/images webserver "+str(decoy_uid)+"_decoy --leave-running=true"
checkpoint_created = os.popen(checkpoint_cmd).read().split("\n")[-1]
checkpoint_cmd = "docker checkpoint create --checkpoint-dir=/root/images webserver-main "+str(decoy_uid)+"_decoy --leave-running=true"
print(checkpoint_cmd)
decoy_uid = round(random.uniform(1, 1000), 0)
print(decoy_uid = round(random.uniform(1, 1000), 0))
print(round(random.uniform(1, 1000), 0))
str(round(random.uniform(1, 1000), 0))[:-2]
decoy_uid = str(round(random.uniform(1, 1000), 0))[:-2]
checkpoint_cmd = "docker checkpoint create --checkpoint-dir=/root/images webserver-main "+(decoy_uid)+"_decoy --leave-running=true"
checkpoint_created = os.popen(checkpoint_cmd).read().split("\n")[-1]
exit()
